{"version":3,"sources":["webpack://Client/./src/client/js/app.js"],"names":["baseURL","apiKey","d","Date","newDate","getMonth","getDate","getFullYear","document","getElementById","addEventListener","performAction","e","newCity","value","console","log","getWeather","then","data","postData","date","temp","main","content","feelings","updateUI","fetch","res","json","url","list","method","credentials","headers","body","JSON","stringify","response","newData","request","allData","innerHTML"],"mappings":"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","file":"main.cc18b85f0c39162d0ae6.hot-update.js","sourcesContent":["/* Global Variables */\n\n/** Personal API key for OpenWeatherMap API */\nconst baseURL = 'http://api.openweathermap.org/data/2.5/weather?q='\nconst apiKey = '&appid=297d714c461b021c0e0eac76978ccbad&units=metric'\n\n// Create a new date instance dynamically with JS\nlet d = new Date()\nlet newDate = d.getMonth() + '.' + d.getDate() + '.' + d.getFullYear()\n\n//Event listener to add function to existing DOM element (button with id \"depart-btn\") to create an event when the button is clicked\ndocument.getElementById('depart-btn').addEventListener('click', performAction)\n\nfunction performAction (e) {\n  const newCity = document.getElementById('city').value\n  /* const feelings = document.getElementById('feelings').value*/\n  console.log(newDate)\n\n  getWeather(baseURL, newCity, apiKey).then(function (data) {\n    console.log(data)\n\n    postData('http://localhost:3000/add', {\n      date: newDate,\n      temp: data.main.temp,\n      content: feelings\n    })\n    updateUI()\n  })\n\n  const getWeather = async (baseURL, newCity, apiKey) => {\n    const res = await fetch(`${baseURL} ${newCity}${apiKey}`)\n    try {\n      const data = await res.json()\n      return data\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  const postData = async (\n    url = '/add',\n    data = { date: newDate, temp: data.list[0].main.temp, content: feelings }\n  ) => {\n    console.log(data)\n    const response = await fetch(url, {\n      method: 'POST',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    try {\n      const newData = await response.json()\n      console.log(newData)\n      return newData\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  const updateUI = async () => {\n    const request = await fetch('http://localhost:3000/all')\n    try {\n      const allData = await request.json()\n      document.getElementById('date').innerHTML = `Date: ${allData.date}`\n      document.getElementById('temp').innerHTML = `Temperature: ${allData.temp}`\n      document.getElementById(\n        'content'\n      ).innerHTML = `I feel: ${allData.content}`\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n"],"sourceRoot":""}