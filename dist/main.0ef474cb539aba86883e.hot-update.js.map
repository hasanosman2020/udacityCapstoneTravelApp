{"version":3,"sources":["webpack://Client/./src/client/js/app.js"],"names":["baseURL","apiKey","d","Date","newDate","getMonth","getDate","getFullYear","document","getElementById","addEventListener","performAction","e","newCity","value","console","log","getWeather","then","data","postData","date","temp","main","content","feelings","updateUI","fetch","res","json","url","list","method","credentials","headers","body","JSON","stringify","response","newData","request","allData","innerHTML"],"mappings":"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","file":"main.0ef474cb539aba86883e.hot-update.js","sourcesContent":["/* Global Variables */\n\n/** Personal API key for OpenWeatherMap API */\nconst baseURL = 'http://api.openweathermap.org/data/2.5/weather?q='\nconst apiKey = '&appid=297d714c461b021c0e0eac76978ccbad&units=metric'\n\n// Create a new date instance dynamically with JS\nlet d = new Date()\nlet newDate = d.getMonth() + '.' + d.getDate() + '.' + d.getFullYear()\n\n//Event listener to add function to existing DOM element (button with id \"depart-btn\") to create an event when the button is clicked\ndocument.getElementById('depart-btn').addEventListener('click', performAction)\n\nfunction performAction (e) {\n  const newCity = document.getElementById('city').value\n  /* const feelings = document.getElementById('feelings').value*/\n  console.log(newDate)\n\n  getWeather(baseURL, newCity, apiKey).then(function (data) {\n    console.log(data)\n\n    postData('http://localhost:3000/add', {\n      date: newDate,\n      temp: data.main.temp,\n      content: feelings\n    })\n    updateUI()\n  })\n}\nconst getWeather = async (baseURL, newCity, apiKey) => {\n  const res = await fetch(`${baseURL} ${newCity}${apiKey}`)\n  try {\n    const data = await res.json()\n    return data\n  } catch (error) {\n    console.log('error', error)\n  }\n}\n\nconst postData = async (\n  url = '/add',\n  data = { date: newDate, temp: data.list[0].main.temp, content: feelings }\n) => {\n  console.log(data)\n  const response = await fetch(url, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  })\n  try {\n    const newData = await response.json()\n    console.log(newData)\n    return newData\n  } catch (error) {\n    console.log('error', error)\n  }\n}\n\nconst updateUI = async () => {\n  const request = await fetch('http://localhost:3000/all')\n  try {\n    const allData = await request.json()\n    document.getElementById('date').innerHTML = `Date: ${allData.date}`\n    document.getElementById('temp').innerHTML = `Temperature: ${allData.temp}`\n    document.getElementById('content').innerHTML = `I feel: ${allData.content}`\n  } catch (error) {\n    console.log('error', error)\n  }\n}\n/*\n  }\n  event.preventDefault()\n\n  console.log(':::Form Submitted:')\n\n  //the handleSubmit function also handles the name of the city as entered by the user\n  const newCity = document.getElementById('city').value\n\n  //Function called by event listener - here the performAction function handles the name of the city entered by the user and the user's feelings as entered by the user and executes the getWeather function.\n  //function performAction (e) {\n\n  //const feelings = document.getElementById('feelings').value\n  console.log(newDate)\n\n  getWeather(baseURL, newCity, apiKey).then(function (data) {\n    console.log(data)\n\n    //then forward the data received from the API (done by invoking the getWeather function) to the server via a post request along with the date (done automatically by JavaScript) and the user's feelings (entered by the user)\n    //the server will store the date, the temperature and the content\n    postData('http://localhost:3000/add', {\n      date: newDate,\n      temp: data.main.temp\n    })\n\n    //after the data is sent to the server we update the user interface\n    updateUI()\n  })\n}\n\n//Funnction to GET Web API data (by using fetch) - the getWeather function uses 'fetch' to obtain the weather information from the OpenWeatherMap API\nconst getWeather = async (baseURL, newCity, apiKey) => {\n  const res = await fetch(`${baseURL}${newCity}${apiKey}`)\n  try {\n    const data = await res.json()\n    return data\n  } catch (error) {\n    console.log('error', error)\n  }\n}\n\n//Function to POST data - in order for the app to post the data to the server,i.e. to make a POST request, it invokes an async function 'postData' and uses the POST route that is set up in the server.js file\n//the server will receive and store the date, the temperature and the user's feelings in the data object\n\nconst postData = async (\n  url = '/add',\n  data = { date: newDate, temp: data.list[0].main.temp }\n) => {\n  console.log(data)\n\n  const response = await fetch(url, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    //Body data type must match 'Content-Type' header\n    body: JSON.stringify(data) //Create JSON string from a JavaScript object\n  })\n  try {\n    const newData = await response.json()\n    console.log(newData)\n    return newData\n  } catch (error) {\n    console.log('error', error)\n  }\n}\n\n//Function to GET projectData - the app sends a GET request to the server to receive the data by invoking an async function 'updateUI' and using the GET route 'all' set up in the server.js file\n//the function amends the values of the data's objects so they can reflect the value that is being stored for them in the server by using inner.HTML\n\nconst updateUI = async () => {\n  const request = await fetch('http://localhost:3000/all')\n  try {\n    const allData = await request.json()\n    document.getElementById('date').innerHTML = `Date: ${allData.date}`\n    document.getElementById('temp').innerHTML = `Temperature: ${allData.temp}`\n  } catch (error) {\n    console.log('error', error)\n  }\n}\n*/\n"],"sourceRoot":""}