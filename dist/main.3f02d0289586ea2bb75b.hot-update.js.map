{"version":3,"sources":["webpack://Client/./node_modules/node-fetch/browser.js","webpack://Client/./src/client/js/app.js"],"names":["document","getElementById","addEventListener","performAction","e","preventDefault","destinationCity","value","departureDate","returnDate","d","Date","currentDate","getDate","getMonth","getFullYear","parseInt","departDate","postData","city","date","callServer","travelData","console","log","updateUI","alert","url","tripData","fetch","method","mode","credentials","headers","body","JSON","stringify","response","asyncParams","res","json","data","statusText"],"mappings":"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","file":"main.3f02d0289586ea2bb75b.hot-update.js","sourcesContent":["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nif (global.fetch) {\n\texports.default = global.fetch.bind(global);\n}\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;","/* Global Variables */\n\n/** Personal API key for OpenWeatherMap API */\n//const baseURL = 'http://api.openweathermap.org/data/2.5/weather?q='\n//const apiKey = '&appid=297d714c461b021c0e0eac76978ccbad&units=metric'\n\n//Event listener to add function to existing DOM element (\"Let's Go!\" button with id \"depart-btn\") to create an event when the button is clicked\nimport fetch from 'node-fetch'\ndocument.getElementById('depart-btn').addEventListener('click', performAction)\n\n//Function that fires off when the click has been registered\nasync function performAction (e) {\n  e.preventDefault()\n\n  //Before clicking on the \"Let's Go!\" button, the user first inputs the city of his destination and dates of his journey - this information is stored in variables.\n  const destinationCity = document.getElementById('destination-city').value\n  const departureDate = document.getElementById('date-departure').value\n  const returnDate = document.getElementById('date-return').value\n  /* const feelings = document.getElementById('feelings').value*/\n\n  // Create a new date instance dynamically with JS\n  let d = new Date()\n  let currentDate = d.getDate() + '.' + d.getMonth() + '.' + d.getFullYear()\n\n  if (parseInt(departureDate) >= parseInt(currentDate)) {\n    const departDate = departureDate\n\n    await postData('/clientData', {\n      city: city,\n      date: departDate\n    })\n\n    //function to call servers after post request\n    await callServer('/getWeatherbit')\n    await callServer('/getPix')\n\n    const travelData = await callServer('/getData')\n    console.log(travelData)\n\n    updateUI()\n  } else {\n    alert('Plesase enter a valid date')\n  }\n}\n\n//POST route for server\nasync function postData (url, tripData) {\n  const response = await fetch(url, {\n    method: 'POST',\n    mode: 'cors',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(tripData)\n  })\n}\n\n//call to server for data\nconst callServer = async url => {\n  const asyncParams = {\n    method: 'GET',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  const res = await fetch(url, asyncParams)\n  try {\n    const data = await res.json()\n    return data\n  } catch {\n    console.log(`Error: ${res.statusText}`)\n  }\n}\n"],"sourceRoot":""}