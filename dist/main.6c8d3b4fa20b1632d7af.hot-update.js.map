{"version":3,"sources":["webpack://Client/./src/client/js/app.js"],"names":["document","getElementById","addEventListener","performAction","e","preventDefault","destinationCity","value","departureDate","returnDate","d","Date","currentDate","getDate","getMonth","getFullYear","parseInt","departDate","postData","city","date","callServer","travelData","console","log","updateUI","getWeather","baseURL","newCity","apiKey","then","data","newDate","temp","main","content","feelings"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AAEA;AACAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,gBAAtC,CAAuD,OAAvD,EAAgEC,aAAhE,E,CAEA;;SACeA,a;;;;;2EAAf,iBAA8BC,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACEA,aAAC,CAACC,cAAF,GADF,CAGE;;AACMC,2BAJR,GAI0BN,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CM,KAJtE;AAKQC,yBALR,GAKwBR,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CM,KALlE;AAMQE,sBANR,GAMqBT,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCM,KAN5D;AAOE;AAEA;;AACIG,aAVN,GAUU,IAAIC,IAAJ,EAVV;AAWMC,uBAXN,GAWoBF,CAAC,CAACG,OAAF,KAAc,GAAd,GAAoBH,CAAC,CAACI,QAAF,EAApB,GAAmC,GAAnC,GAAyCJ,CAAC,CAACK,WAAF,EAX7D;;AAAA,kBAaMC,QAAQ,CAACR,aAAD,CAAR,IAA2BQ,QAAQ,CAACJ,WAAD,CAbzC;AAAA;AAAA;AAAA;;AAcUK,sBAdV,GAcuBT,aAdvB;AAAA;AAAA,mBAgBUU,QAAQ,CAAC,aAAD,EAAgB;AAC5BC,kBAAI,EAAEA,IADsB;AAE5BC,kBAAI,EAAEH;AAFsB,aAAhB,CAhBlB;;AAAA;AAAA;AAAA,mBAsBUI,UAAU,CAAC,gBAAD,CAtBpB;;AAAA;AAAA;AAAA,mBAuBUA,UAAU,CAAC,SAAD,CAvBpB;;AAAA;AAAA;AAAA,mBAyB6BA,UAAU,CAAC,UAAD,CAzBvC;;AAAA;AAyBUC,sBAzBV;AA0BIC,mBAAO,CAACC,GAAR,CAAYF,UAAZ;AAEAG,oBAAQ;;AA5BZ;AA+BEC,sBAAU,CAACC,OAAD,EAAUC,OAAV,EAAmBC,MAAnB,CAAV,CAAqCC,IAArC,CAA0C,UAAUC,IAAV,EAAgB;AACxD;AAEAb,sBAAQ,CAAC,2BAAD,EAA8B;AACpCE,oBAAI,EAAEY,OAD8B;AAEpCC,oBAAI,EAAEF,IAAI,CAACG,IAAL,CAAUD,IAFoB;AAGpCE,uBAAO,EAAEC;AAH2B,eAA9B,CAAR;AAKAX,sBAAQ;AACT,aATD;;AA/BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"main.6c8d3b4fa20b1632d7af.hot-update.js","sourcesContent":["/* Global Variables */\n\n/** Personal API key for OpenWeatherMap API */\n//const baseURL = 'http://api.openweathermap.org/data/2.5/weather?q='\n//const apiKey = '&appid=297d714c461b021c0e0eac76978ccbad&units=metric'\n\n//Event listener to add function to existing DOM element (\"Let's Go!\" button with id \"depart-btn\") to create an event when the button is clicked\ndocument.getElementById('depart-btn').addEventListener('click', performAction)\n\n//Function that fires off when the click has been registered\nasync function performAction (e) {\n  e.preventDefault()\n\n  //Before clicking on the \"Let's Go!\" button, the user first inputs the city of his destination and dates of his journey - this information is stored in variables.\n  const destinationCity = document.getElementById('destination-city').value\n  const departureDate = document.getElementById('date-departure').value\n  const returnDate = document.getElementById('date-return').value\n  /* const feelings = document.getElementById('feelings').value*/\n\n  // Create a new date instance dynamically with JS\n  let d = new Date()\n  let currentDate = d.getDate() + '.' + d.getMonth() + '.' + d.getFullYear()\n\n  if (parseInt(departureDate) >= parseInt(currentDate)) {\n    const departDate = departureDate\n\n    await postData('/clientData', {\n      city: city,\n      date: departDate\n    })\n\n    //function to call servers after post request\n    await callServer('/getWeatherbit')\n    await callServer('/getPix')\n\n    const travelData = await callServer('/getData')\n    console.log(travelData)\n\n    updateUI()\n  }\n\n  getWeather(baseURL, newCity, apiKey).then(function (data) {\n    //console.log(data)\n\n    postData('http://localhost:3000/add', {\n      date: newDate,\n      temp: data.main.temp,\n      content: feelings\n    })\n    updateUI()\n  })\n}\n"],"sourceRoot":""}